#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> ::xrn::util::BasicRandomNumberGenerator<T>::BasicRandomNumberGenerator()
    : m_rng{ m_physicalRng() }
    , m_range{ 0, 100 }
{}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> ::xrn::util::BasicRandomNumberGenerator<T>::BasicRandomNumberGenerator(
    BasicRandomNumberGenerator::Type min
    , BasicRandomNumberGenerator::Type max
)
    : m_rng{ m_physicalRng() }
    , m_range{ min, max }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Basic
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::BasicRandomNumberGenerator<T>::generate()
    -> BasicRandomNumberGenerator::Type
{
    return m_range(m_rng);
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::BasicRandomNumberGenerator<T>::generate(
    BasicRandomNumberGenerator::Type min
    , BasicRandomNumberGenerator::Type max
) -> BasicRandomNumberGenerator::Type
{
    return ::std::uniform_int_distribution<BasicRandomNumberGenerator::Type>{ min, max }(m_rng);
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::BasicRandomNumberGenerator<T>::operator()()
    -> BasicRandomNumberGenerator::Type
{
    return this->generate();
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::BasicRandomNumberGenerator<T>::operator()(
    BasicRandomNumberGenerator::Type min
    , BasicRandomNumberGenerator::Type max
) -> BasicRandomNumberGenerator::Type
{
    return this->generate(min, max);
}
