#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> ::xrn::util::OptionalReference<T, ENABLE_IF_CONST(T)>::OptionalReference() noexcept
    : m_value{ nullptr }
{}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> ::xrn::util::OptionalReference<T, ENABLE_IF_CONST(T)>::OptionalReference(
    T& value
) noexcept
    : m_value{ &value }
{}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> ::xrn::util::OptionalReference<T, ENABLE_IF_CONST(T)>::OptionalReference(
    T* value
) noexcept
    : m_value{ value }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Comparison
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::OptionalReference<T, ENABLE_IF_CONST(T)>::operator<=>(
    const auto& rhs
) const
{
    return this->get() <=> rhs;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::OptionalReference<T, ENABLE_IF_CONST(T)>::operator<=>(
    const auto* rhs
) const
{
    return this->get() <=> *rhs;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr ::xrn::util::OptionalReference<T, ENABLE_IF_CONST(T)>::operator bool() const
{
    return m_value;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::OptionalReference<T, ENABLE_IF_CONST(T)>::isEmpty() const
    -> bool
{
    return !m_value;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Getters
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::OptionalReference<T, ENABLE_IF_CONST(T)>::get() const
    -> const T&
{
    if (!m_value) {
        throw ::std::runtime_error{ "Accessing an empty OptionalReference" };
    }
    return *m_value;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::OptionalReference<T, ENABLE_IF_CONST(T)>::unsafeGet() const noexcept
    -> const T&
{
    return *m_value;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> ::xrn::util::OptionalReference<T, ENABLE_IF_CONST(T)>::operator const T&() const
{
    return this->get();
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> ::xrn::util::OptionalReference<T, ENABLE_IF_CONST(T)>::operator const T*() const noexcept
{
    return m_value;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::OptionalReference<T, ENABLE_IF_CONST(T)>::operator->() const noexcept
    -> const T*
{
    return m_value;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::OptionalReference<T, ENABLE_IF_CONST(T)>::operator*() const noexcept
    -> const T&
{
    return this->get();
}
