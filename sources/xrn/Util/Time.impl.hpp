#pragma once

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::createAsSeconds(
    const auto& amount
) noexcept -> BasicTime
{
    return BasicTime{ static_cast<BasicTime::Type>(amount) * 1'000 };
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::createAsMilliseconds(
    const auto& amount
) noexcept -> BasicTime
{
    return BasicTime{ static_cast<BasicTime::Type>(amount) };
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::createAsMicroseconds(
    const auto& amount
) noexcept -> BasicTime
{
    return BasicTime{ static_cast<BasicTime::Type>(amount) / 1'000 };
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::createAsNanoseconds(
    const auto& amount
) noexcept -> BasicTime
{
    return BasicTime{ static_cast<BasicTime::Type>(amount) / 1'000'000 };
}


///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr ::xrn::util::BasicTime<T>::BasicTime() noexcept = default;

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr ::xrn::util::BasicTime<T>::BasicTime(
    auto amount
) noexcept
    : m_time{ static_cast<BasicTime::Type>(amount) }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Comparison
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::operator<=>(
    const BasicTime& rhs
) const
    -> ::std::partial_ordering
{
    return m_time <=> rhs.m_time;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::operator<=>(
    const auto& rhs
) const
    -> ::std::partial_ordering
{
    return m_time <=> rhs;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Get
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr ::xrn::util::BasicTime<T>::operator BasicTime::Type() const noexcept
{
    return m_time;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::get() const
    -> BasicTime::Type
{
    return m_time;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::getAsSeconds() const
    -> BasicTime::Type
{
    return m_time / 1'000;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::getAsMilliseconds() const
    -> BasicTime::Type
{
    return m_time;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::getAsMicroseconds() const
    -> BasicTime::Type
{
    return m_time * 1'000;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::getAsNanoseconds() const
    -> BasicTime::Type
{
    return m_time * 1'000'000;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Set
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::BasicTime<T>::operator=(
    const auto& amount
) -> BasicTime&
{
    m_time = static_cast<T>(amount);
    return *this;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> void ::xrn::util::BasicTime<T>::set(
    const BasicTime& amount
)
{
    m_time = static_cast<T>(amount.m_time);
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> void ::xrn::util::BasicTime<T>::set(
    const auto& amount
)
{
    m_time = static_cast<T>(amount);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Add
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::BasicTime<T>::operator+=(
    const BasicTime& rhs
) -> BasicTime&
{
    m_time += rhs.m_time;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::BasicTime<T>::operator+=(
    const auto& rhs
) -> BasicTime&
{
    m_time += static_cast<T>(rhs);
    return *this;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::operator+(
    const BasicTime& rhs
) const
    -> BasicTime
{
    BasicTime newTime{ *this };
    newTime.add(rhs);
    return newTime;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::operator+(
    const auto& rhs
) const
    -> BasicTime
{
    BasicTime newTime{ *this };
    newTime.add(rhs);
    return newTime;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> void ::xrn::util::BasicTime<T>::add(
    const BasicTime& amount
)
{
    m_time += amount.m_time;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> void ::xrn::util::BasicTime<T>::add(
    const auto& amount
)
{
    m_time += static_cast<T>(amount);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Sub
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::BasicTime<T>::operator-=(
    const BasicTime& rhs
) -> BasicTime&
{
    m_time -= rhs.m_time;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::BasicTime<T>::operator-=(
    const auto& rhs
) -> BasicTime&
{
    m_time -= static_cast<T>(rhs);
    return *this;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::operator-(
    const BasicTime& rhs
) const
    -> BasicTime
{
    BasicTime newTime{ *this };
    newTime.sub(rhs);
    return newTime;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::operator-(
    const auto& rhs
) const
    -> BasicTime
{
    BasicTime newTime{ *this };
    newTime.sub(rhs);
    return newTime;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> void ::xrn::util::BasicTime<T>::sub(
    const BasicTime& amount
)
{
    m_time -= amount.m_time;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> void ::xrn::util::BasicTime<T>::sub(
    const auto& amount
)
{
    m_time -= static_cast<T>(amount);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Mul
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::BasicTime<T>::operator*=(
    const auto& rhs
) -> BasicTime&
{
    m_time *= static_cast<T>(rhs);
    return *this;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::operator*(
    const auto& rhs
) const
    -> BasicTime
{
    BasicTime newTime{ *this };
    newTime.mul(rhs);
    return newTime;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> void ::xrn::util::BasicTime<T>::mul(
    const auto& amount
)
{
    m_time *= static_cast<T>(amount);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Div
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::BasicTime<T>::operator/=(
    const auto& rhs
) -> BasicTime&
{
    m_time /= static_cast<T>(rhs);
    return *this;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::operator/(
    const auto& rhs
) const
    -> BasicTime
{
    BasicTime newTime{ *this };
    newTime.div(rhs);
    return newTime;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> void ::xrn::util::BasicTime<T>::div(
    const auto& amount
)
{
    m_time /= static_cast<T>(amount);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Mod
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::BasicTime<T>::operator%=(
    const auto& rhs
) -> BasicTime&
{
    auto newValue{
        static_cast<::std::uint_fast32_t>(m_time) % static_cast<::std::uint_fast32_t>(rhs)
    };
    m_time = static_cast<T>(newValue);
    return *this;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicTime<T>::operator%(
    const auto& rhs
) const
    -> BasicTime
{
    BasicTime newTime{ *this };
    newTime.mod(rhs);
    return newTime;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> void ::xrn::util::BasicTime<T>::mod(
    const auto& amount
)
{
    auto newValue{
        static_cast<::std::uint_fast32_t>(m_time) % static_cast<::std::uint_fast32_t>(amount)
    };
    m_time = static_cast<T>(newValue);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// External types operators
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> [[ nodiscard ]] constexpr auto operator+(
    const auto& lhs,
    const ::xrn::util::BasicTime<T>& rhs
) -> ::xrn::util::BasicTime<T>
{
    return ::xrn::util::BasicTime<T>::createAsMilliseconds(lhs) + rhs;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> [[ nodiscard ]] constexpr auto operator-(
    const auto& lhs,
    const ::xrn::util::BasicTime<T>& rhs
) -> ::xrn::util::BasicTime<T>
{
    return ::xrn::util::BasicTime<T>::createAsMilliseconds(lhs) - rhs;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Litteral definitions
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] constexpr auto ::xrn::util::literal::operator""_s(
    long double amount
) -> ::xrn::Time
{
    return ::xrn::Time::createAsSeconds(amount);
}

///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] constexpr auto ::xrn::util::literal::operator""_s(
    long long unsigned amount
) -> ::xrn::Time
{
    return ::xrn::Time::createAsSeconds(amount);
}

///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] constexpr auto ::xrn::util::literal::operator""_ms(
    long double amount
) -> ::xrn::Time
{
    return ::xrn::Time::createAsMilliseconds(amount);
}

///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] constexpr auto ::xrn::util::literal::operator""_ms(
    long long unsigned amount
) -> ::xrn::Time
{
    return ::xrn::Time::createAsMilliseconds(amount);
}

///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] constexpr auto ::xrn::util::literal::operator""_us(
    long double amount
) -> ::xrn::Time
{
    return ::xrn::Time::createAsMicroseconds(amount);
}

///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] constexpr auto ::xrn::util::literal::operator""_us(
    long long unsigned amount
) -> ::xrn::Time
{
    return ::xrn::Time::createAsMicroseconds(amount);
}

///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] constexpr auto ::xrn::util::literal::operator""_ns(
    long double amount
) -> ::xrn::Time
{
    return ::xrn::Time::createAsNanoseconds(amount);
}

///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] constexpr auto ::xrn::util::literal::operator""_ns(
    long long unsigned amount
) -> ::xrn::Time
{
    return ::xrn::Time::createAsNanoseconds(amount);
}
