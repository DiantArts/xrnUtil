#pragma once

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <xrn/Util/Time.hpp>



namespace xrn::util {

///////////////////////////////////////////////////////////////////////////
/// \brief Simplifies file manipulations
/// \ingroup util
///
/// \include File.hpp <xrn/Util/File.hpp>
///
/// ::xrn::util::File provide an easy approach to file manipulation
///
/// Usage example:
/// \code
/// auto content{ ::xrn::File::getContent("filepath") };
/// \endcode
///
///////////////////////////////////////////////////////////////////////////
class File {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor deleted
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit File() = delete;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Basic
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the content of a file
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] static inline auto getContent(
        const ::std::string& filename
    ) -> ::std::string;



private:

};

} // namespace xrn::ecs



///////////////////////////////////////////////////////////////////////////
// Template specialization
///////////////////////////////////////////////////////////////////////////
namespace xrn { using File = ::xrn::util::File; }



///////////////////////////////////////////////////////////////////////////
// Header-implimentation
///////////////////////////////////////////////////////////////////////////
#include <xrn/Util/File.impl.hpp>
